openapi: 3.0.0
info:
  title: API do Assessor de Investimentos Virtual
  description: API REST para cadastro de clientes, definição de perfil, gestão de saldo e carteira de investimentos.
  version: 1.0.0
servers:
  - url: https://assessor-virtual-api-684499909473.southamerica-east1.run.app/api
    description: Deploy no Google Cloud Run
  - url: https://assessor-virtual-api.onrender.com/api
    description: Deploy no render
  - url: http://localhost:3000/api
    description: Servidor de Desenvolvimento Local
tags:
  - name: Autenticação
    description: Operações de registro e login de usuários.
  - name: Clientes
    description: Operações de clientes, perfil, saldo e carteira.
  - name: Produtos de Investimento
    description: Gerenciamento do catálogo de produtos de investimento.

paths:
  # --- Rotas de Autenticação ---
  /auth/register:
    post:
      tags: [Autenticação]
      summary: Registra um novo cliente
      description: Limitado a 10 tentativas por IP em uma janela de 15 minutos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Cliente registrado com sucesso.
        '400':
          description: Dados inválidos (ex. senha fraca).
        '409':
          description: E-mail já cadastrado.
        '429':
          description: Muitas tentativas. Aguarde 15 minutos.

  /auth/login:
    post:
      tags: [Autenticação]
      summary: Autentica um cliente e retorna um token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login bem-sucedido.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Credenciais inválidas.
        '403':
           description: Conta não verificada. # Adicionado para clareza

  /auth/verify-email: # Rota adicionada ao swagger
    post:
      tags: [Autenticação]
      summary: Verifica o e-mail do usuário usando um token
      description: Ativa a conta do usuário após a verificação do token enviado por e-mail.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required: [token]
      responses:
        '200':
          description: E-mail verificado com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "E-mail verificado com sucesso!"
        '400':
          description: Token não fornecido.
        '401':
          description: Token inválido ou expirado.

  /auth/refresh-token:
    post:
      tags: [Autenticação]
      summary: Renova o token JWT
      description: |
        Gera um novo token JWT válido usando o refresh token atual.
        Útil para manter a sessão do usuário ativa sem necessidade de novo login.
        Limitado a 20 tentativas por IP em uma janela de 15 minutos.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token renovado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Token inválido ou expirado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Refresh token revogado ou expirado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Muitas tentativas. Aguarde 15 minutos.

  /auth/forgot-password:
    post:
      tags: [Autenticação]
      summary: Solicita redefinição de senha
      description: Envia um e-mail com token temporário para redefinição de senha. O token expira em 1 hora.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Solicitação processada. Uma mensagem genérica é retornada por segurança.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Se o e-mail fornecido estiver em nosso sistema, um link de redefinição de senha será enviado."
        '400':
           description: E-mail não fornecido.
        '429':
          description: Muitas tentativas. Aguarde alguns minutos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/reset-password:
    post:
      tags: [Autenticação]
      summary: Redefine a senha do usuário
      description: Altera a senha do usuário usando o token temporário recebido por e-mail.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Senha redefinida com sucesso.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Senha alterada com sucesso."
        '400':
          description: Token/senha não fornecidos ou senha inválida (fraca).
        '401':
          description: Token inválido ou expirado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Muitas tentativas. Aguarde alguns minutos.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # --- Rotas de Clientes (CRUD) ---
  # '/clientes/me' não existe mais explicitamente, use '/clientes/{id}' com o ID do token
  # Se precisar manter, adicione aqui. Assumindo que foi removido/substituído.

  /clientes:
    get:
      tags: [Clientes]
      summary: Lista todos os clientes cadastrados (Apenas Admin)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de clientes retornada com sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClienteResponse'
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é admin).

  /clientes/{id}:
    get:
      tags: [Clientes]
      summary: Busca um cliente pelo seu ID (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      responses:
        '200':
          description: Cliente encontrado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteResponse'
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente não encontrado.
    put:
      tags: [Clientes]
      summary: Atualiza os dados de um cliente (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClienteUpdateRequest'
      responses:
        '200':
          description: Cliente atualizado com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteResponse'
        '400':
           description: Dados inválidos (ex: e-mail duplicado).
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente não encontrado.
    delete:
      tags: [Clientes]
      summary: Deleta um cliente (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      responses:
        '204':
          description: Cliente deletado com sucesso.
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente não encontrado.

  # --- Rotas de Perfil e Recomendação ---
  /clientes/{id}/perfil:
    post:
      tags: [Clientes]
      summary: Define o perfil de investidor de um cliente (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PerfilRequest' # Schema atualizado abaixo
      responses:
        '200':
          description: Perfil definido com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerfilResponse'
        '400':
           description: Respostas inválidas ou faltando.
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente não encontrado.

  /clientes/{id}/recomendacoes:
    get:
      tags: [Clientes]
      summary: Obtém a carteira de investimentos recomendada (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      description: Gera uma carteira de investimentos recomendada dinamicamente com base no perfil do investidor do cliente.
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      responses:
        '200':
          description: Recomendação gerada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecomendacaoResponse'
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente ou perfil não encontrado / Produtos insuficientes para recomendação.

  # Removido /recomendacoes/user/{userId} pois parece redundante com /clientes/{id}/recomendacoes

  /clientes/{id}/recomendacoes/investir:
    post:
      tags: [Clientes]
      summary: Investe o saldo disponível na carteira recomendada (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestirRecomendacaoRequest'
      responses:
        '200':
          description: Investimento realizado com sucesso. Retorna a carteira atualizada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarteiraResponse'
        '400':
          description: Saldo insuficiente ou erro ao processar o investimento / carteira inválida.
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
           description: Cliente não encontrado.


  # --- Rotas de Saldo e Carteira ---
  /clientes/{id}/depositar:
    post:
      tags: [Clientes]
      summary: Deposita um valor na conta do cliente (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositoRequest'
      responses:
        '200':
          description: Depósito realizado com sucesso. Retorna dados do cliente atualizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClienteResponse'
        '400':
          description: Valor de depósito inválido (não positivo).
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente não encontrado.

  /clientes/{id}/carteira:
    get:
      tags: [Clientes]
      summary: Busca a carteira de ativos de um cliente (Dono da conta ou Admin)
      description: |
        Retorna a carteira de investimentos do cliente.
        Esta rota é protegida por autenticação e pelo middleware isOwnerOrAdmin.
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      responses:
        '200':
          description: Carteira retornada com sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarteiraResponse'
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente não encontrado.

  /clientes/{id}/carteira/comprar:
    post:
      tags: [Clientes]
      summary: Compra um ativo para a carteira do cliente (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompraRequest' # Schema atualizado para refletir 'valor'
      responses:
        '200':
          description: Compra realizada com sucesso. Retorna a carteira atualizada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarteiraResponse'
        '400':
          description: Dados da compra inválidos (produtoId, valor). # Alterado
        '401':
          description: Não autorizado (token inválido/expirado).
        '402':
          description: Saldo insuficiente.
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente ou produto não encontrado.

  /clientes/{id}/carteira/vender:
    post:
      tags: [Clientes]
      summary: Vende um ativo da carteira do cliente (Dono da conta ou Admin)
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ClienteId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VendaRequest'
      responses:
        '200':
          description: Venda realizada com sucesso. Retorna a carteira atualizada.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarteiraResponse'
        '400':
          description: Quantidade de venda inválida ou insuficiente / ativo não encontrado na carteira.
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é dono nem admin).
        '404':
          description: Cliente ou produto não encontrado.

  # --- Rotas de Produtos de Investimento (CRUD) ---
  /investimentos:
    get:
      tags: [Produtos de Investimento]
      summary: Lista todos os produtos de investimento (Público)
      responses:
        '200':
          description: Sucesso.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProdutoInvestimento'
    post:
      tags: [Produtos de Investimento]
      summary: Cria um novo produto de investimento (Apenas Admin)
      security:
        - bearerAuth: [] # Requer token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProdutoInvestimentoRequest'
      responses:
        '201':
          description: Produto criado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdutoInvestimento'
        '400':
           description: Dados inválidos (campos obrigatórios, preço negativo).
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é admin).

  /investimentos/{id}:
    get:
      tags: [Produtos de Investimento]
      summary: Busca um produto pelo ID (Público)
      parameters:
        - $ref: '#/components/parameters/ProdutoId'
      responses:
        '200':
          description: Sucesso.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdutoInvestimento'
        '404':
          description: Produto não encontrado.
    put:
      tags: [Produtos de Investimento]
      summary: Atualiza um produto (Apenas Admin)
      security:
        - bearerAuth: [] # Requer token
      parameters:
        - $ref: '#/components/parameters/ProdutoId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProdutoInvestimentoRequest'
      responses:
        '200':
          description: Produto atualizado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProdutoInvestimento'
        '400':
           description: Dados inválidos.
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é admin).
        '404':
          description: Produto não encontrado.
    delete:
      tags: [Produtos de Investimento]
      summary: Deleta um produto (Apenas Admin)
      security:
        - bearerAuth: [] # Requer token
      parameters:
        - $ref: '#/components/parameters/ProdutoId'
      responses:
        '204':
          description: Produto deletado com sucesso.
        '401':
          description: Não autorizado (token inválido/expirado).
        '403':
           description: Acesso negado (não é admin).
        '404':
          description: Produto não encontrado.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "Insira o token JWT no formato: Bearer {token}"

  parameters:
    ClienteId:
      name: id
      in: path
      required: true
      description: ID do cliente
      schema:
        type: integer
        example: 1
    ProdutoId:
      name: id
      in: path
      required: true
      description: ID do produto de investimento
      schema:
        type: integer
        example: 3

  schemas:
    RegisterRequest:
      type: object
      properties:
        nome: { type: string, example: "Maria da Silva" }
        email: { type: string, format: email, example: "maria.silva@email.com" }
        senha:
          type: string
          format: password
          example: "SenhaF0rte!"
          description: "Mínimo 8 caracteres, com maiúscula, minúscula, número e símbolo (@$!%*?&)."
          # pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$' # Pattern pode ser usado para validação automática em algumas ferramentas
      required: [nome, email, senha]

    LoginRequest:
      type: object
      properties:
        email: { type: string, format: email, example: "maria.silva@email.com" }
        senha: { type: string, format: password, example: "SenhaF0rte!" }
      required: [email, senha]

    LoginResponse:
      type: object
      required: [cliente, accessToken, role]
      properties:
        cliente:
          type: object
          required: [id, nome, email]
          properties:
            id: { type: integer, example: 1 }
            nome: { type: string, example: "Maria da Silva" }
            email: { type: string, example: "maria.silva@email.com" }
        accessToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..." }
        refreshToken: { type: string, example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...", nullable: true }
        role: { type: string, enum: [cliente, admin], example: "cliente" }

    ClienteUpdateRequest:
      type: object
      description: "Dados para atualizar um cliente. Não inclui a senha."
      properties:
        nome: { type: string, example: "Maria da Silva Santos" }
        email: { type: string, format: email, example: "maria.santos@email.com" }
      required: [nome, email]

    ClienteResponse:
      type: object
      properties:
        id: { type: integer, example: 1 }
        nome: { type: string, example: "Maria da Silva" }
        email: { type: string, format: email, example: "maria.silva@email.com" }
        saldo: { type: number, format: float, example: 5000.75 }
        perfilId: { type: integer, nullable: true, example: 2 }
        emailVerificado: { type: boolean, example: true } # Adicionado emailVerificado

    # --- Schema PerfilRequest ATUALIZADO ---
    PerfilRequest:
      type: object
      properties:
        respostas:
          type: object
          description: Respostas do questionário de perfil de investidor atualizado.
          properties:
            idade:
              type: string
              enum: [A, B, C, D, E, F]
              example: "C"
              description: "Faixa etária do cliente (A: <=25, B: 26-35, C: 36-45, D: 46-55, E: 56-65, F: >65)"
            situacaoFinanceira:
              type: string
              enum: [A, B, C, D]
              example: "B"
              description: "Situação financeira (A: Construindo, B: Crescendo, C: Consolidado, D: Depende Renda)"
            objetivoPrincipal:
              type: string
              enum: [A, B, C, D, E]
              example: "D"
              description: "Objetivo do investimento (A: Preservar CP, B: Bem MP, C: Aumentar LP, D: Aposentadoria MLP, E: Maximizar Risco)"
            liquidez:
              type: string
              enum: [A, B, C]
              example: "C"
              description: "Necessidade de resgate em 12 meses (A: Provável, B: Possível, C: Improvável)"
            reacaoPerda:
              type: string
              enum: [A, B, C, D, E]
              example: "D"
              description: "Reação a queda de 15% (A: Resgata tudo, B: Resgata parte, C: Mantém preocupado, D: Mantém tranquilo, E: Investe mais)"
            conhecimentoMercado:
              type: string
              enum: [A, B, C, D]
              example: "C"
              description: "Conhecimento sobre investimentos (A: Nenhum/Baixo, B: Básico, C: Médio, D: Avançado)"
          required:
            - idade
            - situacaoFinanceira
            - objetivoPrincipal
            - liquidez
            - reacaoPerda
            - conhecimentoMercado
      required: [respostas] # O objeto respostas é obrigatório
    # --- Fim do Schema PerfilRequest ATUALIZADO ---

    PerfilResponse:
      type: object
      properties:
        id: { type: integer, example: 2 }
        nome: { type: string, example: "Moderado" }
        descricao: { type: string, example: "Busca um equilíbrio entre segurança e rentabilidade." }

    ProdutoInvestimento:
      type: object
      properties:
        id: { type: integer, example: 3 }
        nome: { type: string, example: "Fundo Imobiliário HGLG11" }
        tipo: { type: string, example: "FII" }
        risco: { type: string, enum: [Baixo, Médio, Alto], example: "Médio" }
        preco: { type: number, format: float, example: 162.30 }
      required: [id, nome, tipo, risco, preco]

    ProdutoInvestimentoRequest:
      type: object
      description: Dados para criar ou atualizar um produto de investimento
      required: [nome, tipo, risco, preco]
      properties:
        nome:
          type: string
          example: "Tesouro IPCA+ 2045"
          description: "Nome completo do produto de investimento"
        tipo:
          type: string
          example: "Renda Fixa"
          description: "Categoria do produto (ex: Renda Fixa, FII, Ação)"
        risco:
          type: string
          enum: [Baixo, Médio, Alto]
          example: "Médio"
          description: "Nível de risco do produto"
        preco:
          type: number
          format: float
          example: 105.50
          exclusiveMinimum: 0
          description: "Preço unitário do produto"

    ItemRecomendado:
      type: object
      description: Produto de investimento com seu percentual recomendado de alocação
      required: [produtoId, nome, tipo, risco, percentualAlocacao]
      properties:
        produtoId:
          type: integer
          example: 1
          description: "ID único do produto de investimento"
        nome:
          type: string
          example: "Tesouro Selic"
          description: "Nome do produto"
        tipo:
          type: string
          example: "Renda Fixa"
          description: "Categoria do produto"
        risco:
          type: string
          example: "Baixo"
          enum: [Baixo, Médio, Alto]
          description: "Nível de risco do produto"
        percentualAlocacao:
          type: integer
          example: 40
          minimum: 1
          maximum: 100
          description: "Percentual recomendado de alocação (1-100)"

    RecomendacaoResponse:
      type: object
      description: Recomendação de carteira baseada no perfil do investidor
      required: [perfilInvestidor, descricaoPerfil, carteiraRecomendada]
      properties:
        perfilInvestidor:
          type: string
          example: "Moderado"
          description: "Nome do perfil do investidor"
        descricaoPerfil:
          type: string
          example: "Busca um equilíbrio entre segurança e rentabilidade."
          description: "Descrição detalhada do perfil"
        carteiraRecomendada:
          type: array
          description: "Lista de produtos recomendados com seus percentuais de alocação"
          minItems: 1
          items:
            $ref: '#/components/schemas/ItemRecomendado'

    InvestirRecomendacaoRequest:
      type: object
      properties:
        carteiraRecomendada:
          type: array
          items:
            # Referencia ItemRecomendado mas pode precisar apenas do produtoId e percentual
            # Mantendo assim por simplicidade, mas idealmente seria um schema específico
             $ref: '#/components/schemas/ItemRecomendado'
          minItems: 1
      required: [carteiraRecomendada]

    DepositoRequest:
      type: object
      properties:
        valor: { type: number, format: float, example: 1500.50, exclusiveMinimum: 0 } # Garante > 0
      required: [valor]

    CompraRequest:
      type: object
      description: Define os dados esperados para comprar um ativo pelo VALOR monetário
      required: [produtoId, valor]
      properties:
        produtoId:
          type: integer
          example: 3
        valor:
          type: number
          format: float
          example: 500.00
          exclusiveMinimum: 0
          description: "Valor em reais a ser investido no produto"

    VendaRequest:
      type: object
      description: Define os dados esperados para vender um ativo pela QUANTIDADE
      required: [produtoId, quantidade]
      properties:
        produtoId:
          type: integer
          example: 3
        quantidade:
          type: number
          format: float
          example: 5
          exclusiveMinimum: 0
          description: "Quantidade do ativo a ser vendida"

    CarteiraItemResponse:
      type: object
      properties:
        produtoId: { type: integer, example: 3 }
        nome: { type: string, example: "Fundo Imobiliário HGLG11" }
        tipo: { type: string, example: "FII" }
        risco: { type: string, example: "Médio" }
        precoUnitario: { type: number, format: float, example: 162.30 }
        quantidade: { type: number, format: float, example: 25.5 } # Precisão pode ser maior
        valorTotal: { type: number, format: float, example: 4138.65 }
      required: [produtoId, nome, tipo, risco, precoUnitario, quantidade, valorTotal]

    CarteiraResponse:
      type: object
      properties:
        ativos:
          type: array
          items:
            $ref: '#/components/schemas/CarteiraItemResponse'
        valorTotalInvestido: { type: number, format: float, example: 15280.40 }
      required: [ativos, valorTotalInvestido]

    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required: [refreshToken]

    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "usuario@email.com"
      required: [email]

    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          example: "reset-token-123"
        novaSenha:
          type: string
          format: password
          example: "NovaSenhaF0rte!"
          description: "Mínimo 8 caracteres, com maiúscula, minúscula, número e símbolo (@$!%*?&)."
          # pattern: '^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$'
      required: [token, novaSenha]

    ErrorResponse:
      type: object
      properties:
        # Removido 'code' e 'details' para simplificar, alinhado com errorHandler
        status:
           type: string
           example: "error"
        statusCode:
          type: integer
          example: 401
        message:
          type: string
          example: "Token inválido ou expirado."
      required: [status, statusCode, message]